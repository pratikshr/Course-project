message"...getting cached data"
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
i ## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if(!is.null(i)) {
message"...getting cached data"
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
i ## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## Just return the inverse if its already set
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Get the matrix from our object
data <- x$get()
## Calculate the inverse using matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Return the matrix
m
}
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if( !is.null(i) ) {
message"...getting cached data"
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
i ## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if( !is.null(i) ) {
message"...getting cached data"
return(i)
}
data <- x$get()
i <- solve(data)
x$setInverse(i)
i ## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if( !is.null(i) ) {
message"...getting cached data"
return(i)
}
data <- x$get()
i <- solve(data) %*% data
x$setInverse(i)
i ## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## Just return the inverse if its already set
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Get the matrix from our object
data <- x$get()
## Calculate the inverse using matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Return the matrix
m
}
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if( !is.null(i) ) {
message"...getting cached data"
return(i)
}
data <- x$get()
i <- solve(data) %*% data
x$setInverse(i)
i ## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if( !is.null(i) ) {
message("...getting cached data")
return(i)
}
data <- x$get()
i <- solve(data) %*% data
x$setInverse(i)
i
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix
amatrix$get()
cacheSolve(amatrix)
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if( !is.null(i) ) {
message("...getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
i
}
cacheSolve(amatrix)
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if( !is.null(i) ) {
message("...getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
i
}
View(c)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL # Initializing the inverse property
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- function(inverse) i <<- inverse
getInverse <- function() i
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$getInverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getInverse()
c
makeCacheMatric(c)
makeCacheMatrix(c)
m <- makeCacheMatrix(c)
m
m$get()
cacheSolve(m)
cache(amatrix)
cacheSolve(amatrix)
c
split(c)
split(c, 2)
split(c, 1)
split(c, 3)
split(c, 3000)
amatrix
m <- amatrix$get()
m
solve(m)
m <- matrix(1:8, nrow = 8, ncol = 8)
solve(m)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
s$`9`
d <- s$`9`
d
class(d)
lapply(s, function(x) colMeans(x[,2]))
lapply(s, function(x) colMeans(x[,c("Ozone")]))
lapply(s, function(s) colMeans(s[,c("Ozone")]))
lapply(s, function() colMeans(s[,c("Ozone")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")]))
lapply(s, function(x) colMeans(x[, ]))
lapply(s, function(x) colMeans(x[,]))
lapply(s, function(x) colMeans(x[,], na.rm = TRUE))
data(cars)
car
cars
data()
data(Formaldehyde)
Formaldehyde
data(attitude)
str(attitude)
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(3,1)]
x[order(x, decreasing = TRUE)]
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(2.1, 2.9)]
x[c(TRUE, TRUE, FALSE, FALSE)]
x
x[c(-1, 2)]
x[-c(1, 2)]
x[1,2]
x[1:2]
x[-1:2]
x[]
y <- setNames(x, letters[1:4])
y
str(y)
y["c"]
y["c", "d"]
y[c("c", "d")]
install.packages("rmy")
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "394bc113cec10f172f19", "b30b900081d5809d6e5adf7861554a1456191c21")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "394bc113cec10f172f19", "b30b900081d5809d6e5adf7861554a1456191c21")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key="7eeb5753524e12ead876", secret="ef33989a51346e93a46ceecc743e6e302fdfe953")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
a[4]
library(httpuv)
install.packages("httpuv")
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key="7eeb5753524e12ead876", secret="ef33989a51346e93a46ceecc743e6e302fdfe953")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
a[4]
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "394bc113cec10f172f19", "b30b900081d5809d6e5adf7861554a1456191c21")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
content(req)
a[4]
content(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
str(raw_result)
str(a)
names(a)
a
library(jsonlite)
names(a)
head(a)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData$name
jsonData$owner
jsoned <- fromJson(a)
jsoned <- fromJSON(a)
a
jsonData
View(jsonData)
install.packages("rjs")
content(req)
json1 <- jsonlite::fromJSON(toJSON(a))
json1[which(json1$name == "datasharing"),]$created_at
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "394bc113cec10f172f19", "b30b900081d5809d6e5adf7861554a1456191c21")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
json1 <- jsonlite::fromJSON(toJSON(a))
json1[which(json1$name == "datasharing"),]$created_at
library(httr)
library(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "394bc113cec10f172f19", "b30b900081d5809d6e5adf7861554a1456191c21")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
json1 <- jsonlite::fromJSON(toJSON(a))
json1[which(json1$name == "datasharing"),]$created_at
library(ggplot2)
setwd("~/Dropbox/Coursera/4. Exploratory Data Analysis/project 2/exdata-data-NEI_data")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEIsub <- NEI[NEI$fips == "24510",]
NEIsub <- aggregate(NEIsub$Emissions, by = list(Year = NEIsub$year, type = NEIsub$type), sum)
NEIsub <- NEIsub[order(NEIsub$type), ]
NEIsub <- transform(NEIsub, type = factor(type))
colnames(NEIsub)[3] <- "Emissions"
g <- ggplot(NEIsub, aes(Year, Emissions))
g + geom_line() + facet_grid(. ~ type )
g <- ggplot(NEIsub, aes(Year, Emissions))
g
g <- ggplot(NEIsub, aes(Year, Emissions))
+ geom_line()
+ facet_grid(. ~ type )
+ ggtitle("Total Emissions by Type in Baltimore City")
g <- ggplot(NEIsub, aes(Year, Emissions))
g + geom_line()
g + geom_line()
+ facet_grid(. ~ type )
View(NEIsub)
g <- ggplot(NEIsub, aes(Year, Emissions))
g + geom_line()
+ facet_grid(. ~ type )
g + geom_line() + facet_grid(. ~ type )
g + geom_line() + facet_grid(. ~ type ) + ggtitle("Total Emissions by Type in Baltimore City")
png('plot3.png')
g <- ggplot(NEIsub, aes(Year, Emissions))
g <- g + geom_line() + facet_grid(. ~ type ) + ggtitle("Total Emissions by Type in Baltimore City")
dev.off()
png('plot3.png')
g <- ggplot(NEIsub, aes(Year, Emissions))
g <- g + geom_line() + facet_grid(. ~ type ) + ggtitle("Total Emissions by Type in Baltimore City")
print(g)
dev.off()
png('plot3.png', width = 700)
g <- ggplot(NEIsub, aes(Year, Emissions))
g <- g + geom_line() + facet_grid(. ~ type ) + ggtitle("Total Emissions by Type in Baltimore City")
print(g)
dev.off()
?geom_line
png('plot3.png', width = 700)
g <- ggplot(NEIsub, aes(Year, Emissions))
g <- g + geom_line(aes(linetype = 4)) + facet_grid(. ~ type ) + ggtitle("Total Emissions by Type in Baltimore City")
print(g)
dev.off()
png('plot3.png', width = 700)
g <- ggplot(NEIsub, aes(Year, Emissions))
g <- g + geom_line() + geom_point() +facet_grid(. ~ type ) + ggtitle("Total Emissions by Type in Baltimore City")
print(g)
dev.off()
View(NEI)
View(SCC)
unique(SCC$Short.Name)
unique(SCC$EI.Sector)
?grep
CC <- grep("coal",SCC$EI.Sector,value=T,ignore.case=T)
CC
x <- grep("comb.*coal", SCC$EI.Sector , ignore.case=FALSE, fixed=FALSE)
x <- grep("coal", SCC$EI.Sector , ignore.case=FALSE, fixed=FALSE)
x <- grep("comb.*coal", SCC$EI.Sector , ignore.case=FALSE, fixed=TRUE)
x <- grep("comb.*coal", SCC$EI.Sector , ignore.case=FALSE, fixed=FALSe, value = TRUE)
x <- grep("comb.*coal", SCC$EI.Sector , ignore.case=FALSE, fixed=FALSE)
x <- grep("comb.*coal", SCC$EI.Sector , ignore.case=FALSE, fixed=FALSE, value = TRUE)
x <- grep("comb.*coal", SCC$EI.Sector , ignore.case=FALSE, value = TRUE)
x
CC
XX <- grep("comb.*coal", SCC$EI.Sector , ignore.case=FALSE, value = TRUE)
rm(x, XX)
CCR <- grep("coal",SCC$EI.Sector,value=T,ignore.case=T)
XX <- grep("coal",SCC$EI.Sector,value=T,ignore.case=T)
XX <- grep("coal", SCC$EI.Sector, value=T, ignore.case=T)
XX <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, value = TRUE)
XX <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, value = TRUE, fixed = FALSE)
XX <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, value = TRUE, fixed = TRUE)
XX <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, value = TRUE, fixed = FALSE)
zz <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, value = TRUE, fixed = FALSE)
rm(XX,CC,CCR)
rm(g)
View(NEI)
zz
str(zz)
ind <- grep("comb.*coal", SCC$EI.Sector, ignore.case=TRUE)
zz <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, fixed = FALSE)
zz
zz <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, value = TRUE, fixed = FALSE)
zz <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, value = FALSE, fixed = FALSE)
zz <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, value = FALSE, fixed = FALSE)
zz <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, value = FALSE, fixed = FALSE)
ind <- grep("comb.*coal", SCC$EI.Sector, ignore.case=TRUE)
identical(zz, ind)
indices <- grep("comb.*coal", SCC$EI.Sector , ignore.case = TRUE, value = FALSE, fixed = FALSE)
sccCodes <- SCC[indices, c(1)]
str(sccCodes)
head(sccCodes)
indicesNEI <- NEI$SCC %in% sccCodes
head(indicesNEI)
NEIsub <- NEI[indicesNEI, c("Emissions", "year")]
str(NEIsub)
dat <- aggregate(dat, by = list(Emissions = Emissions, year = year), sum)
dat <- aggregate(NEIsub, by = list(Emissions = Emissions, year = year), sum)
dat <- aggregate(NEIsub, by = list(Emissions = NEIsub$Emissions, year = NEIsub$year), sum)
View(dat)
dat <- aggregate(NEIsub$Emissions, by = list(Emissions = NEIsub$Emissions, year = NEIsub$year), sum)
View(dat)
dat <- aggregate(NEIsub$Emissions, by = list(year = NEIsub$year), sum)
View(dat)
View(dat)
png("plot4.png")
plot(dat$Year, dat$Emissions, type="o", xlab="Year", ylab="Total PM 2.5 emitted (tons)", main = "PM 2.5 Emissions (Coal Combustion Sources)")
dev.off()
png("plot4.png")
plot(dat$Year, log(dat$Emissions), type="o", xlab="Year", ylab="Total PM 2.5 emitted (tons) (Logarithm)", main = "PM 2.5 Emissions (Coal Combustion Sources)")
dev.off()
png("plot4.png")
plot(dat$year, log(dat$Emissions), type="o", xlab="Year", ylab="Total PM 2.5 emitted (tons) (Logarithm)", main = "PM 2.5 Emissions (Coal Combustion Sources)")
dev.off()
png("plot4.png")
plot(dat$year, log(dat$x), type="o", xlab="Year", ylab="Total PM 2.5 emitted (tons) (Logarithm)", main = "PM 2.5 Emissions (Coal Combustion Sources)")
dev.off()
View(dat)
View(dat)
png("plot4.png")
plot(dat$year, dat$x, type="o", xlab="Year", ylab="Total PM 2.5 emitted (tons) (Logarithm)", main = "PM 2.5 Emissions (Coal Combustion Sources)")
dev.off()
plot(dat$year, dat$x, type="o", xlab="Year", ylab="Total PM 2.5 emitted [tons]", main = "PM 2.5 Emissions (Coal Combustion Sources)")
png("plot4.png")
plot(dat$year, dat$x, type="o", xlab="Year", ylab="Total PM 2.5 emitted [tons]", main = "PM 2.5 Emissions (Coal Combustion Sources)")
dev.off()
png("plot4.png")
plot(dat$year, dat$x, type="o", xlab="Year", ylab="Total PM 2.5 emitted [tons]", main = "PM 2.5 Emissions (ALL Coal Combustion Sources)")
dev.off()
unique(SCC$SCC.Level.One)
unique(SCC$EI.Sector)
indices <- grep("Mobile - On-Road", SCC$EI.Sector , ignore.case = TRUE, value = FALSE, fixed = FALSE)
#Get the SCC Code for the respective indices
sccCodes <- SCC[indices, c(1)]
# Find indices for the respective SCC Code in NEI dataset
indicesNEI <- NEI$SCC %in% sccCodes
#Subset NEI Dataset based on the above indices, extracting only the required columns
NEIsub <- NEI[indicesNEI, c("fips", "Emissions", "year")]
NEIsub <- NEI[NEI$fips == "24510", c("year", "Emissions")]
dat <- aggregate(NEIsub$Emissions, by = list(year = NEIsub$year), sum)
View(dat)
png("plot4.png")
png("plot5.png")
plot(dat$year, dat$x, type="o", xlab="Year", ylab="Total PM 2.5 emitted [tons]", main = "PM 2.5 Emissions from Motor Vehicles, Baltimore")
dev.off()
